openapi: 3.0.3
info:
  title: Gateway Controller API
  description: |
    REST API for managing API configurations in the WSO2 API Platform Gateway.

    The Gateway Controller accepts API configurations in YAML or JSON format and dynamically
    configures the Router (Envoy Proxy) via xDS protocol. Supports full CRUD lifecycle
    for API configurations with real-time updates to the Router.

    **Key Features:**
    - Submit API configurations in YAML or JSON
    - Real-time validation and error reporting
    - Zero-downtime configuration updates
    - Persistent storage with SQLite
    - Query deployed API configurations
  version: 1.0.0
  contact:
    name: WSO2 API Platform Team
servers:
  - url: http://localhost:9090
    description: Local development
  - url: http://gateway-controller:9090
    description: Docker/Kubernetes deployment

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the Gateway Controller
      operationId: healthCheck
      tags:
        - System
      responses:
        '200':
          description: Gateway Controller is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time

  /apis:
    post:
      summary: Create a new API configuration
      description: |
        Submit a new API configuration to the Gateway Controller. The configuration
        is validated, persisted, and translated to Envoy xDS resources. The Router
        begins routing traffic for the API within 5 seconds.

        **Validation Rules:**
        - API name + version combination must be unique
        - Context must start with `/` and not end with `/`
        - At least one upstream and one operation required
        - For same API name, context must be consistent across versions
      operationId: createAPI
      tags:
        - API Management
      requestBody:
        required: true
        content:
          application/yaml:
            schema:
              $ref: '#/components/schemas/APIConfiguration'
            example:
              version: api-platform.wso2.com/v1
              kind: http/rest
              data:
                name: weather-api
                version: v1.0
                context: /weather
                upstream:
                  - url: https://api.weather.com/api/v2
                operations:
                  - method: GET
                    path: /{country_code}/{city}
                  - method: POST
                    path: /{country_code}/{city}
          application/json:
            schema:
              $ref: '#/components/schemas/APIConfiguration'
            example:
              version: api-platform.wso2.com/v1
              kind: http/rest
              data:
                name: weather-api
                version: v1.0
                context: /weather
                upstream:
                  - url: https://api.weather.com/api/v2
                operations:
                  - method: GET
                    path: /{country_code}/{city}
                  - method: POST
                    path: /{country_code}/{city}
      responses:
        '201':
          description: API configuration created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APICreateResponse'
        '400':
          description: Invalid configuration (validation failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - API with same name and version already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: List all API configurations
      description: |
        Retrieve a list of all deployed API configurations with metadata.
        Returns basic information about each API (name, version, context, deployment time).
      operationId: listAPIs
      tags:
        - API Management
      responses:
        '200':
          description: List of API configurations
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  count:
                    type: integer
                    example: 5
                  apis:
                    type: array
                    items:
                      $ref: '#/components/schemas/APIListItem'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /apis/{name}/{version}:
    get:
      summary: Get API configuration by name and version
      description: Retrieve the complete configuration for a specific API by its name and version
      operationId: getAPIByNameVersion
      tags:
        - API Management
      parameters:
        - name: name
          in: path
          required: true
          description: Name of the API
          schema:
            type: string
          example: weather-api
        - name: version
          in: path
          required: true
          description: Version of the API
          schema:
            type: string
          example: v1.0
      responses:
        '200':
          description: API configuration details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDetailResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/APIDetailResponse'
        '404':
          description: API configuration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update an existing API configuration
      description: |
        Update an existing API configuration. The update is validated and applied atomically.
        The Router receives the updated configuration within 5 seconds. In-flight requests
        complete with the old configuration; new requests use the updated configuration.

        **Important:** If validation fails, the existing configuration remains active.
      operationId: updateAPI
      tags:
        - API Management
      parameters:
        - name: name
          in: path
          required: true
          description: Name of the API to update
          schema:
            type: string
          example: weather-api
        - name: version
          in: path
          required: true
          description: Version of the API to update
          schema:
            type: string
          example: v1.0
      requestBody:
        required: true
        content:
          application/yaml:
            schema:
              $ref: '#/components/schemas/APIConfiguration'
          application/json:
            schema:
              $ref: '#/components/schemas/APIConfiguration'
      responses:
        '200':
          description: API configuration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIUpdateResponse'
        '400':
          description: Invalid configuration (validation failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: API configuration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete an API configuration
      description: |
        Remove an API configuration from the Gateway Controller. The Router stops
        accepting traffic for this API within 5 seconds. In-flight requests complete
        successfully; new requests receive 404 Not Found.
      operationId: deleteAPI
      tags:
        - API Management
      parameters:
        - name: name
          in: path
          required: true
          description: Name of the API to delete
          schema:
            type: string
          example: weather-api
        - name: version
          in: path
          required: true
          description: Version of the API to delete
          schema:
            type: string
          example: v1.0
      responses:
        '200':
          description: API configuration deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: API configuration deleted successfully
                  id:
                    type: string
                    example: 550e8400-e29b-41d4-a716-446655440000
        '404':
          description: API configuration not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    APIConfiguration:
      type: object
      required:
        - version
        - kind
        - data
      properties:
        version:
          type: string
          description: API specification version
          example: api-platform.wso2.com/v1
          enum:
            - api-platform.wso2.com/v1
        kind:
          type: string
          description: API type
          example: http/rest
          enum:
            - http/rest
        data:
          $ref: '#/components/schemas/APIConfigData'

    APIConfigData:
      type: object
      required:
        - name
        - version
        - context
        - upstream
        - operations
      properties:
        name:
          type: string
          description: Human-readable API name (must be URL-friendly - only letters, numbers, spaces, hyphens, underscores, and dots allowed)
          minLength: 1
          maxLength: 100
          pattern: '^[a-zA-Z0-9\-_\. ]+$'
          example: weather-api
        version:
          type: string
          description: Semantic version of the API
          pattern: '^v\d+\.\d+$'
          example: v1.0
        context:
          type: string
          description: Base path for all API routes (must start with /, no trailing slash)
          pattern: '^\/[a-zA-Z0-9_\-\/]*[^\/]$'
          minLength: 1
          maxLength: 200
          example: /weather
        upstream:
          type: array
          description: List of backend service URLs
          minItems: 1
          items:
            $ref: '#/components/schemas/Upstream'
        operations:
          type: array
          description: List of HTTP operations/routes
          minItems: 1
          items:
            $ref: '#/components/schemas/Operation'

    Upstream:
      type: object
      required:
        - url
      properties:
        url:
          type: string
          format: uri
          description: Backend service URL (may include path prefix like /api/v2)
          example: https://api.weather.com/api/v2

    Operation:
      type: object
      required:
        - method
        - path
      properties:
        method:
          type: string
          description: HTTP method
          enum:
            - GET
            - POST
            - PUT
            - DELETE
            - PATCH
            - HEAD
            - OPTIONS
          example: GET
        path:
          type: string
          description: Route path with optional {param} placeholders
          pattern: '^\/.*$'
          example: /{country_code}/{city}

    APICreateResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: API configuration created successfully
        id:
          type: string
          format: uuid
          description: Unique identifier for the created API configuration
          example: 550e8400-e29b-41d4-a716-446655440000
        created_at:
          type: string
          format: date-time
          example: 2025-10-11T10:30:00Z

    APIUpdateResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: API configuration updated successfully
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        updated_at:
          type: string
          format: date-time
          example: 2025-10-11T11:45:00Z

    APIListItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        name:
          type: string
          example: weather-api
        version:
          type: string
          example: v1.0
        context:
          type: string
          example: /weather
        status:
          type: string
          enum:
            - pending
            - deployed
            - failed
          example: deployed
        created_at:
          type: string
          format: date-time
          example: 2025-10-11T10:30:00Z
        updated_at:
          type: string
          format: date-time
          example: 2025-10-11T10:30:00Z

    APIDetailResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        api:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: 550e8400-e29b-41d4-a716-446655440000
            configuration:
              $ref: '#/components/schemas/APIConfiguration'
            metadata:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - pending
                    - deployed
                    - failed
                  example: deployed
                created_at:
                  type: string
                  format: date-time
                  example: 2025-10-11T10:30:00Z
                updated_at:
                  type: string
                  format: date-time
                  example: 2025-10-11T10:30:00Z
                deployed_at:
                  type: string
                  format: date-time
                  example: 2025-10-11T10:30:05Z

    ErrorResponse:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          description: High-level error description
          example: Configuration validation failed
        errors:
          type: array
          description: Detailed validation errors
          items:
            $ref: '#/components/schemas/ValidationError'

    ValidationError:
      type: object
      properties:
        field:
          type: string
          description: Field that failed validation
          example: data.context
        message:
          type: string
          description: Human-readable error message
          example: Context must start with / and cannot end with /

tags:
  - name: System
    description: System health and status endpoints
  - name: API Management
    description: CRUD operations for API configurations
