// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for APIConfigurationKind.
const (
	Httprest APIConfigurationKind = "http/rest"
)

// Defines values for APIConfigurationVersion.
const (
	ApiPlatformWso2Comv1 APIConfigurationVersion = "api-platform.wso2.com/v1"
)

// Defines values for APIDetailResponseApiMetadataStatus.
const (
	APIDetailResponseApiMetadataStatusDeployed APIDetailResponseApiMetadataStatus = "deployed"
	APIDetailResponseApiMetadataStatusFailed   APIDetailResponseApiMetadataStatus = "failed"
	APIDetailResponseApiMetadataStatusPending  APIDetailResponseApiMetadataStatus = "pending"
)

// Defines values for APIListItemStatus.
const (
	APIListItemStatusDeployed APIListItemStatus = "deployed"
	APIListItemStatusFailed   APIListItemStatus = "failed"
	APIListItemStatusPending  APIListItemStatus = "pending"
)

// Defines values for OperationMethod.
const (
	DELETE  OperationMethod = "DELETE"
	GET     OperationMethod = "GET"
	HEAD    OperationMethod = "HEAD"
	OPTIONS OperationMethod = "OPTIONS"
	PATCH   OperationMethod = "PATCH"
	POST    OperationMethod = "POST"
	PUT     OperationMethod = "PUT"
)

// APIConfigData defines model for APIConfigData.
type APIConfigData struct {
	// Context Base path for all API routes (must start with /, no trailing slash)
	Context string `json:"context"`

	// Name Human-readable API name (must be URL-friendly - only letters, numbers, spaces, hyphens, underscores, and dots allowed)
	Name string `json:"name"`

	// Operations List of HTTP operations/routes
	Operations []Operation `json:"operations"`

	// Upstream List of backend service URLs
	Upstream []Upstream `json:"upstream"`

	// Version Semantic version of the API
	Version string `json:"version"`
}

// APIConfiguration defines model for APIConfiguration.
type APIConfiguration struct {
	Data APIConfigData `json:"data"`

	// Kind API type
	Kind APIConfigurationKind `json:"kind"`

	// Version API specification version
	Version APIConfigurationVersion `json:"version"`
}

// APIConfigurationKind API type
type APIConfigurationKind string

// APIConfigurationVersion API specification version
type APIConfigurationVersion string

// APICreateResponse defines model for APICreateResponse.
type APICreateResponse struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Unique identifier for the created API configuration
	Id      *openapi_types.UUID `json:"id,omitempty"`
	Message *string             `json:"message,omitempty"`
	Status  *string             `json:"status,omitempty"`
}

// APIDetailResponse defines model for APIDetailResponse.
type APIDetailResponse struct {
	Api *struct {
		Configuration *APIConfiguration   `json:"configuration,omitempty"`
		Id            *openapi_types.UUID `json:"id,omitempty"`
		Metadata      *struct {
			CreatedAt  *time.Time                          `json:"created_at,omitempty"`
			DeployedAt *time.Time                          `json:"deployed_at,omitempty"`
			Status     *APIDetailResponseApiMetadataStatus `json:"status,omitempty"`
			UpdatedAt  *time.Time                          `json:"updated_at,omitempty"`
		} `json:"metadata,omitempty"`
	} `json:"api,omitempty"`
	Status *string `json:"status,omitempty"`
}

// APIDetailResponseApiMetadataStatus defines model for APIDetailResponse.Api.Metadata.Status.
type APIDetailResponseApiMetadataStatus string

// APIListItem defines model for APIListItem.
type APIListItem struct {
	Context   *string             `json:"context,omitempty"`
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Name      *string             `json:"name,omitempty"`
	Status    *APIListItemStatus  `json:"status,omitempty"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
	Version   *string             `json:"version,omitempty"`
}

// APIListItemStatus defines model for APIListItem.Status.
type APIListItemStatus string

// APIUpdateResponse defines model for APIUpdateResponse.
type APIUpdateResponse struct {
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Message   *string             `json:"message,omitempty"`
	Status    *string             `json:"status,omitempty"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Errors Detailed validation errors
	Errors *[]ValidationError `json:"errors,omitempty"`

	// Message High-level error description
	Message string `json:"message"`
	Status  string `json:"status"`
}

// Operation defines model for Operation.
type Operation struct {
	// Method HTTP method
	Method OperationMethod `json:"method"`

	// Path Route path with optional {param} placeholders
	Path string `json:"path"`
}

// OperationMethod HTTP method
type OperationMethod string

// Upstream defines model for Upstream.
type Upstream struct {
	// Url Backend service URL (may include path prefix like /api/v2)
	Url string `json:"url"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	// Field Field that failed validation
	Field *string `json:"field,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`
}

// CreateAPIJSONRequestBody defines body for CreateAPI for application/json ContentType.
type CreateAPIJSONRequestBody = APIConfiguration

// UpdateAPIJSONRequestBody defines body for UpdateAPI for application/json ContentType.
type UpdateAPIJSONRequestBody = APIConfiguration

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all API configurations
	// (GET /apis)
	ListAPIs(c *gin.Context)
	// Create a new API configuration
	// (POST /apis)
	CreateAPI(c *gin.Context)
	// Delete an API configuration
	// (DELETE /apis/{name}/{version})
	DeleteAPI(c *gin.Context, name string, version string)
	// Get API configuration by name and version
	// (GET /apis/{name}/{version})
	GetAPIByNameVersion(c *gin.Context, name string, version string)
	// Update an existing API configuration
	// (PUT /apis/{name}/{version})
	UpdateAPI(c *gin.Context, name string, version string)
	// Health check endpoint
	// (GET /health)
	HealthCheck(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListAPIs operation middleware
func (siw *ServerInterfaceWrapper) ListAPIs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAPIs(c)
}

// CreateAPI operation middleware
func (siw *ServerInterfaceWrapper) CreateAPI(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAPI(c)
}

// DeleteAPI operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPI(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", c.Param("version"), &version, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAPI(c, name, version)
}

// GetAPIByNameVersion operation middleware
func (siw *ServerInterfaceWrapper) GetAPIByNameVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", c.Param("version"), &version, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAPIByNameVersion(c, name, version)
}

// UpdateAPI operation middleware
func (siw *ServerInterfaceWrapper) UpdateAPI(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", c.Param("version"), &version, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateAPI(c, name, version)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheck(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/apis", wrapper.ListAPIs)
	router.POST(options.BaseURL+"/apis", wrapper.CreateAPI)
	router.DELETE(options.BaseURL+"/apis/:name/:version", wrapper.DeleteAPI)
	router.GET(options.BaseURL+"/apis/:name/:version", wrapper.GetAPIByNameVersion)
	router.PUT(options.BaseURL+"/apis/:name/:version", wrapper.UpdateAPI)
	router.GET(options.BaseURL+"/health", wrapper.HealthCheck)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tu9K/Ney7UJr3r28Wv47AAD//8s9dDzgMAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
