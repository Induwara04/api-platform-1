// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for APIConfigurationKind.
const (
	Httprest APIConfigurationKind = "http/rest"
)

// Defines values for APIConfigurationVersion.
const (
	ApiPlatformWso2Comv1 APIConfigurationVersion = "api-platform.wso2.com/v1"
)

// Defines values for APIDetailResponseApiMetadataStatus.
const (
	APIDetailResponseApiMetadataStatusDeployed APIDetailResponseApiMetadataStatus = "deployed"
	APIDetailResponseApiMetadataStatusFailed   APIDetailResponseApiMetadataStatus = "failed"
	APIDetailResponseApiMetadataStatusPending  APIDetailResponseApiMetadataStatus = "pending"
)

// Defines values for APIListItemStatus.
const (
	APIListItemStatusDeployed APIListItemStatus = "deployed"
	APIListItemStatusFailed   APIListItemStatus = "failed"
	APIListItemStatusPending  APIListItemStatus = "pending"
)

// Defines values for OperationMethod.
const (
	DELETE  OperationMethod = "DELETE"
	GET     OperationMethod = "GET"
	HEAD    OperationMethod = "HEAD"
	OPTIONS OperationMethod = "OPTIONS"
	PATCH   OperationMethod = "PATCH"
	POST    OperationMethod = "POST"
	PUT     OperationMethod = "PUT"
)

// APIConfigData defines model for APIConfigData.
type APIConfigData struct {
	// Context Base path for all API routes (must start with /, no trailing slash)
	Context string `json:"context"`

	// Name Human-readable API name (must be URL-friendly - only letters, numbers, spaces, hyphens, underscores, and dots allowed)
	Name string `json:"name"`

	// Operations List of HTTP operations/routes
	Operations []Operation `json:"operations"`

	// ProjectName Project name associated with the API
	ProjectName *string `json:"projectName,omitempty"`

	// Upstream List of backend service URLs
	Upstream []Upstream `json:"upstream"`

	// Version Semantic version of the API
	Version string `json:"version"`
}

// APIConfiguration defines model for APIConfiguration.
type APIConfiguration struct {
	Data APIConfigData `json:"data"`

	// Kind API type
	Kind APIConfigurationKind `json:"kind"`

	// Version API specification version
	Version APIConfigurationVersion `json:"version"`
}

// APIConfigurationKind API type
type APIConfigurationKind string

// APIConfigurationVersion API specification version
type APIConfigurationVersion string

// APICreateResponse defines model for APICreateResponse.
type APICreateResponse struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Unique identifier for the created API configuration
	Id      *openapi_types.UUID `json:"id,omitempty"`
	Message *string             `json:"message,omitempty"`
	Status  *string             `json:"status,omitempty"`
}

// APIDetailResponse defines model for APIDetailResponse.
type APIDetailResponse struct {
	Api *struct {
		Configuration *APIConfiguration   `json:"configuration,omitempty"`
		Id            *openapi_types.UUID `json:"id,omitempty"`
		Metadata      *struct {
			CreatedAt  *time.Time                          `json:"created_at,omitempty"`
			DeployedAt *time.Time                          `json:"deployed_at,omitempty"`
			Status     *APIDetailResponseApiMetadataStatus `json:"status,omitempty"`
			UpdatedAt  *time.Time                          `json:"updated_at,omitempty"`
		} `json:"metadata,omitempty"`
	} `json:"api,omitempty"`
	Status *string `json:"status,omitempty"`
}

// APIDetailResponseApiMetadataStatus defines model for APIDetailResponse.Api.Metadata.Status.
type APIDetailResponseApiMetadataStatus string

// APIListItem defines model for APIListItem.
type APIListItem struct {
	Context   *string             `json:"context,omitempty"`
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Name      *string             `json:"name,omitempty"`
	Status    *APIListItemStatus  `json:"status,omitempty"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
	Version   *string             `json:"version,omitempty"`
}

// APIListItemStatus defines model for APIListItem.Status.
type APIListItemStatus string

// APIUpdateResponse defines model for APIUpdateResponse.
type APIUpdateResponse struct {
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Message   *string             `json:"message,omitempty"`
	Status    *string             `json:"status,omitempty"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Errors Detailed validation errors
	Errors *[]ValidationError `json:"errors,omitempty"`

	// Message High-level error description
	Message string `json:"message"`
	Status  string `json:"status"`
}

// Operation defines model for Operation.
type Operation struct {
	// Method HTTP method
	Method OperationMethod `json:"method"`

	// Path Route path with optional {param} placeholders
	Path string `json:"path"`
}

// OperationMethod HTTP method
type OperationMethod string

// Upstream defines model for Upstream.
type Upstream struct {
	// Url Backend service URL (may include path prefix like /api/v2)
	Url string `json:"url"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	// Field Field that failed validation
	Field *string `json:"field,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`
}

// CreateAPIJSONRequestBody defines body for CreateAPI for application/json ContentType.
type CreateAPIJSONRequestBody = APIConfiguration

// UpdateAPIJSONRequestBody defines body for UpdateAPI for application/json ContentType.
type UpdateAPIJSONRequestBody = APIConfiguration

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all API configurations
	// (GET /apis)
	ListAPIs(c *gin.Context)
	// Create a new API configuration
	// (POST /apis)
	CreateAPI(c *gin.Context)
	// Delete an API configuration
	// (DELETE /apis/{name}/{version})
	DeleteAPI(c *gin.Context, name string, version string)
	// Get API configuration by name and version
	// (GET /apis/{name}/{version})
	GetAPIByNameVersion(c *gin.Context, name string, version string)
	// Update an existing API configuration
	// (PUT /apis/{name}/{version})
	UpdateAPI(c *gin.Context, name string, version string)
	// Health check endpoint
	// (GET /health)
	HealthCheck(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListAPIs operation middleware
func (siw *ServerInterfaceWrapper) ListAPIs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAPIs(c)
}

// CreateAPI operation middleware
func (siw *ServerInterfaceWrapper) CreateAPI(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAPI(c)
}

// DeleteAPI operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPI(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", c.Param("version"), &version, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAPI(c, name, version)
}

// GetAPIByNameVersion operation middleware
func (siw *ServerInterfaceWrapper) GetAPIByNameVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", c.Param("version"), &version, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAPIByNameVersion(c, name, version)
}

// UpdateAPI operation middleware
func (siw *ServerInterfaceWrapper) UpdateAPI(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", c.Param("version"), &version, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateAPI(c, name, version)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheck(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/apis", wrapper.ListAPIs)
	router.POST(options.BaseURL+"/apis", wrapper.CreateAPI)
	router.DELETE(options.BaseURL+"/apis/:name/:version", wrapper.DeleteAPI)
	router.GET(options.BaseURL+"/apis/:name/:version", wrapper.GetAPIByNameVersion)
	router.PUT(options.BaseURL+"/apis/:name/:version", wrapper.UpdateAPI)
	router.GET(options.BaseURL+"/health", wrapper.HealthCheck)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
