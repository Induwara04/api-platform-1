// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for APIConfigurationKind.
const (
	Httprest APIConfigurationKind = "http/rest"
)

// Defines values for APIConfigurationVersion.
const (
	ApiPlatformWso2Comv1 APIConfigurationVersion = "api-platform.wso2.com/v1"
)

// Defines values for APIDetailResponseApiMetadataStatus.
const (
	APIDetailResponseApiMetadataStatusDeployed APIDetailResponseApiMetadataStatus = "deployed"
	APIDetailResponseApiMetadataStatusFailed   APIDetailResponseApiMetadataStatus = "failed"
	APIDetailResponseApiMetadataStatusPending  APIDetailResponseApiMetadataStatus = "pending"
)

// Defines values for APIListItemStatus.
const (
	APIListItemStatusDeployed APIListItemStatus = "deployed"
	APIListItemStatusFailed   APIListItemStatus = "failed"
	APIListItemStatusPending  APIListItemStatus = "pending"
)

// Defines values for OperationMethod.
const (
	DELETE  OperationMethod = "DELETE"
	GET     OperationMethod = "GET"
	HEAD    OperationMethod = "HEAD"
	OPTIONS OperationMethod = "OPTIONS"
	PATCH   OperationMethod = "PATCH"
	POST    OperationMethod = "POST"
	PUT     OperationMethod = "PUT"
)

// APIConfigData defines model for APIConfigData.
type APIConfigData struct {
	// Context Base path for all API routes (must start with /, no trailing slash)
	Context string `json:"context"`

	// Name Human-readable API name (must be URL-friendly - only letters, numbers, spaces, hyphens, underscores, and dots allowed)
	Name string `json:"name"`

	// Operations List of HTTP operations/routes
	Operations []Operation `json:"operations"`

	// Upstream List of backend service URLs
	Upstream []Upstream `json:"upstream"`

	// Version Semantic version of the API
	Version string `json:"version"`
}

// APIConfiguration defines model for APIConfiguration.
type APIConfiguration struct {
	Data APIConfigData `json:"data"`

	// Kind API type
	Kind APIConfigurationKind `json:"kind"`

	// Version API specification version
	Version APIConfigurationVersion `json:"version"`
}

// APIConfigurationKind API type
type APIConfigurationKind string

// APIConfigurationVersion API specification version
type APIConfigurationVersion string

// APICreateResponse defines model for APICreateResponse.
type APICreateResponse struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Unique identifier for the created API configuration
	Id      *openapi_types.UUID `json:"id,omitempty"`
	Message *string             `json:"message,omitempty"`
	Status  *string             `json:"status,omitempty"`
}

// APIDetailResponse defines model for APIDetailResponse.
type APIDetailResponse struct {
	Api *struct {
		Configuration *APIConfiguration   `json:"configuration,omitempty"`
		Id            *openapi_types.UUID `json:"id,omitempty"`
		Metadata      *struct {
			CreatedAt  *time.Time                          `json:"created_at,omitempty"`
			DeployedAt *time.Time                          `json:"deployed_at,omitempty"`
			Status     *APIDetailResponseApiMetadataStatus `json:"status,omitempty"`
			UpdatedAt  *time.Time                          `json:"updated_at,omitempty"`
		} `json:"metadata,omitempty"`
	} `json:"api,omitempty"`
	Status *string `json:"status,omitempty"`
}

// APIDetailResponseApiMetadataStatus defines model for APIDetailResponse.Api.Metadata.Status.
type APIDetailResponseApiMetadataStatus string

// APIListItem defines model for APIListItem.
type APIListItem struct {
	Context   *string             `json:"context,omitempty"`
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Name      *string             `json:"name,omitempty"`
	Status    *APIListItemStatus  `json:"status,omitempty"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
	Version   *string             `json:"version,omitempty"`
}

// APIListItemStatus defines model for APIListItem.Status.
type APIListItemStatus string

// APIUpdateResponse defines model for APIUpdateResponse.
type APIUpdateResponse struct {
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Message   *string             `json:"message,omitempty"`
	Status    *string             `json:"status,omitempty"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Errors Detailed validation errors
	Errors *[]ValidationError `json:"errors,omitempty"`

	// Message High-level error description
	Message string `json:"message"`
	Status  string `json:"status"`
}

// Operation defines model for Operation.
type Operation struct {
	// Method HTTP method
	Method OperationMethod `json:"method"`

	// Path Route path with optional {param} placeholders
	Path string `json:"path"`
}

// OperationMethod HTTP method
type OperationMethod string

// Upstream defines model for Upstream.
type Upstream struct {
	// Url Backend service URL (may include path prefix like /api/v2)
	Url string `json:"url"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	// Field Field that failed validation
	Field *string `json:"field,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`
}

// CreateAPIJSONRequestBody defines body for CreateAPI for application/json ContentType.
type CreateAPIJSONRequestBody = APIConfiguration

// UpdateAPIJSONRequestBody defines body for UpdateAPI for application/json ContentType.
type UpdateAPIJSONRequestBody = APIConfiguration

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all API configurations
	// (GET /apis)
	ListAPIs(c *gin.Context)
	// Create a new API configuration
	// (POST /apis)
	CreateAPI(c *gin.Context)
	// Delete an API configuration
	// (DELETE /apis/{name}/{version})
	DeleteAPI(c *gin.Context, name string, version string)
	// Get API configuration by name and version
	// (GET /apis/{name}/{version})
	GetAPIByNameVersion(c *gin.Context, name string, version string)
	// Update an existing API configuration
	// (PUT /apis/{name}/{version})
	UpdateAPI(c *gin.Context, name string, version string)
	// Health check endpoint
	// (GET /health)
	HealthCheck(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListAPIs operation middleware
func (siw *ServerInterfaceWrapper) ListAPIs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAPIs(c)
}

// CreateAPI operation middleware
func (siw *ServerInterfaceWrapper) CreateAPI(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAPI(c)
}

// DeleteAPI operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPI(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", c.Param("version"), &version, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAPI(c, name, version)
}

// GetAPIByNameVersion operation middleware
func (siw *ServerInterfaceWrapper) GetAPIByNameVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", c.Param("version"), &version, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAPIByNameVersion(c, name, version)
}

// UpdateAPI operation middleware
func (siw *ServerInterfaceWrapper) UpdateAPI(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", c.Param("version"), &version, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateAPI(c, name, version)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheck(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/apis", wrapper.ListAPIs)
	router.POST(options.BaseURL+"/apis", wrapper.CreateAPI)
	router.DELETE(options.BaseURL+"/apis/:name/:version", wrapper.DeleteAPI)
	router.GET(options.BaseURL+"/apis/:name/:version", wrapper.GetAPIByNameVersion)
	router.PUT(options.BaseURL+"/apis/:name/:version", wrapper.UpdateAPI)
	router.GET(options.BaseURL+"/health", wrapper.HealthCheck)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
