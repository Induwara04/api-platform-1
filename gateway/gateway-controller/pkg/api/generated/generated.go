// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for APIConfigurationKind.
const (
	Httprest APIConfigurationKind = "http/rest"
)

// Defines values for APIConfigurationVersion.
const (
	ApiPlatformWso2Comv1 APIConfigurationVersion = "api-platform.wso2.com/v1"
)

// Defines values for APIDetailResponseApiMetadataStatus.
const (
	APIDetailResponseApiMetadataStatusDeployed APIDetailResponseApiMetadataStatus = "deployed"
	APIDetailResponseApiMetadataStatusFailed   APIDetailResponseApiMetadataStatus = "failed"
	APIDetailResponseApiMetadataStatusPending  APIDetailResponseApiMetadataStatus = "pending"
)

// Defines values for APIListItemStatus.
const (
	APIListItemStatusDeployed APIListItemStatus = "deployed"
	APIListItemStatusFailed   APIListItemStatus = "failed"
	APIListItemStatusPending  APIListItemStatus = "pending"
)

// Defines values for OperationMethod.
const (
	DELETE  OperationMethod = "DELETE"
	GET     OperationMethod = "GET"
	HEAD    OperationMethod = "HEAD"
	OPTIONS OperationMethod = "OPTIONS"
	PATCH   OperationMethod = "PATCH"
	POST    OperationMethod = "POST"
	PUT     OperationMethod = "PUT"
)

// APIConfigData defines model for APIConfigData.
type APIConfigData struct {
	// Context Base path for all API routes (must start with /, no trailing slash)
	Context string `json:"context"`

	// Name Human-readable API name
	Name string `json:"name"`

	// Operations List of HTTP operations/routes
	Operations []Operation `json:"operations"`

	// Upstream List of backend service URLs
	Upstream []Upstream `json:"upstream"`

	// Version Semantic version of the API
	Version string `json:"version"`
}

// APIConfiguration defines model for APIConfiguration.
type APIConfiguration struct {
	Data APIConfigData `json:"data"`

	// Kind API type
	Kind APIConfigurationKind `json:"kind"`

	// Version API specification version
	Version APIConfigurationVersion `json:"version"`
}

// APIConfigurationKind API type
type APIConfigurationKind string

// APIConfigurationVersion API specification version
type APIConfigurationVersion string

// APICreateResponse defines model for APICreateResponse.
type APICreateResponse struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Unique identifier for the created API configuration
	Id      *openapi_types.UUID `json:"id,omitempty"`
	Message *string             `json:"message,omitempty"`
	Status  *string             `json:"status,omitempty"`
}

// APIDetailResponse defines model for APIDetailResponse.
type APIDetailResponse struct {
	Api *struct {
		Configuration *APIConfiguration   `json:"configuration,omitempty"`
		Id            *openapi_types.UUID `json:"id,omitempty"`
		Metadata      *struct {
			CreatedAt  *time.Time                          `json:"created_at,omitempty"`
			DeployedAt *time.Time                          `json:"deployed_at,omitempty"`
			Status     *APIDetailResponseApiMetadataStatus `json:"status,omitempty"`
			UpdatedAt  *time.Time                          `json:"updated_at,omitempty"`
		} `json:"metadata,omitempty"`
	} `json:"api,omitempty"`
	Status *string `json:"status,omitempty"`
}

// APIDetailResponseApiMetadataStatus defines model for APIDetailResponse.Api.Metadata.Status.
type APIDetailResponseApiMetadataStatus string

// APIListItem defines model for APIListItem.
type APIListItem struct {
	Context   *string             `json:"context,omitempty"`
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Name      *string             `json:"name,omitempty"`
	Status    *APIListItemStatus  `json:"status,omitempty"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
	Version   *string             `json:"version,omitempty"`
}

// APIListItemStatus defines model for APIListItem.Status.
type APIListItemStatus string

// APIUpdateResponse defines model for APIUpdateResponse.
type APIUpdateResponse struct {
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Message   *string             `json:"message,omitempty"`
	Status    *string             `json:"status,omitempty"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Errors Detailed validation errors
	Errors *[]ValidationError `json:"errors,omitempty"`

	// Message High-level error description
	Message string `json:"message"`
	Status  string `json:"status"`
}

// Operation defines model for Operation.
type Operation struct {
	// Method HTTP method
	Method OperationMethod `json:"method"`

	// Path Route path with optional {param} placeholders
	Path string `json:"path"`
}

// OperationMethod HTTP method
type OperationMethod string

// Upstream defines model for Upstream.
type Upstream struct {
	// Url Backend service URL (may include path prefix like /api/v2)
	Url string `json:"url"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	// Field Field that failed validation
	Field *string `json:"field,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`
}

// CreateAPIJSONRequestBody defines body for CreateAPI for application/json ContentType.
type CreateAPIJSONRequestBody = APIConfiguration

// UpdateAPIJSONRequestBody defines body for UpdateAPI for application/json ContentType.
type UpdateAPIJSONRequestBody = APIConfiguration

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all API configurations
	// (GET /apis)
	ListAPIs(c *gin.Context)
	// Create a new API configuration
	// (POST /apis)
	CreateAPI(c *gin.Context)
	// Delete an API configuration
	// (DELETE /apis/{name}/{version})
	DeleteAPI(c *gin.Context, name string, version string)
	// Get API configuration by name and version
	// (GET /apis/{name}/{version})
	GetAPIByNameVersion(c *gin.Context, name string, version string)
	// Update an existing API configuration
	// (PUT /apis/{name}/{version})
	UpdateAPI(c *gin.Context, name string, version string)
	// Health check endpoint
	// (GET /health)
	HealthCheck(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListAPIs operation middleware
func (siw *ServerInterfaceWrapper) ListAPIs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAPIs(c)
}

// CreateAPI operation middleware
func (siw *ServerInterfaceWrapper) CreateAPI(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAPI(c)
}

// DeleteAPI operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPI(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", c.Param("version"), &version, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAPI(c, name, version)
}

// GetAPIByNameVersion operation middleware
func (siw *ServerInterfaceWrapper) GetAPIByNameVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", c.Param("version"), &version, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAPIByNameVersion(c, name, version)
}

// UpdateAPI operation middleware
func (siw *ServerInterfaceWrapper) UpdateAPI(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", c.Param("version"), &version, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateAPI(c, name, version)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheck(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/apis", wrapper.ListAPIs)
	router.POST(options.BaseURL+"/apis", wrapper.CreateAPI)
	router.DELETE(options.BaseURL+"/apis/:name/:version", wrapper.DeleteAPI)
	router.GET(options.BaseURL+"/apis/:name/:version", wrapper.GetAPIByNameVersion)
	router.PUT(options.BaseURL+"/apis/:name/:version", wrapper.UpdateAPI)
	router.GET(options.BaseURL+"/health", wrapper.HealthCheck)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
