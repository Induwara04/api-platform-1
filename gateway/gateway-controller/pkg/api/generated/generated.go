// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for APIConfigurationKind.
const (
	Httprest APIConfigurationKind = "http/rest"
)

// Defines values for APIConfigurationVersion.
const (
	ApiPlatformWso2Comv1 APIConfigurationVersion = "api-platform.wso2.com/v1"
)

// Defines values for APIDetailResponseApiMetadataStatus.
const (
	APIDetailResponseApiMetadataStatusDeployed APIDetailResponseApiMetadataStatus = "deployed"
	APIDetailResponseApiMetadataStatusFailed   APIDetailResponseApiMetadataStatus = "failed"
	APIDetailResponseApiMetadataStatusPending  APIDetailResponseApiMetadataStatus = "pending"
)

// Defines values for APIListItemStatus.
const (
	APIListItemStatusDeployed APIListItemStatus = "deployed"
	APIListItemStatusFailed   APIListItemStatus = "failed"
	APIListItemStatusPending  APIListItemStatus = "pending"
)

// Defines values for OperationMethod.
const (
	DELETE  OperationMethod = "DELETE"
	GET     OperationMethod = "GET"
	HEAD    OperationMethod = "HEAD"
	OPTIONS OperationMethod = "OPTIONS"
	PATCH   OperationMethod = "PATCH"
	POST    OperationMethod = "POST"
	PUT     OperationMethod = "PUT"
)

// APIConfigData defines model for APIConfigData.
type APIConfigData struct {
	// Context Base path for all API routes (must start with /, no trailing slash)
	Context string `json:"context"`

	// Name Human-readable API name (must be URL-friendly - only letters, numbers, spaces, hyphens, underscores, and dots allowed)
	Name string `json:"name"`

	// Operations List of HTTP operations/routes
	Operations []Operation `json:"operations"`

	// Upstream List of backend service URLs
	Upstream []Upstream `json:"upstream"`

	// Version Semantic version of the API
	Version string `json:"version"`
}

// APIConfiguration defines model for APIConfiguration.
type APIConfiguration struct {
	Data APIConfigData `json:"data"`

	// Kind API type
	Kind APIConfigurationKind `json:"kind"`

	// Version API specification version
	Version APIConfigurationVersion `json:"version"`
}

// APIConfigurationKind API type
type APIConfigurationKind string

// APIConfigurationVersion API specification version
type APIConfigurationVersion string

// APICreateResponse defines model for APICreateResponse.
type APICreateResponse struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Id Unique identifier for the created API configuration
	Id      *openapi_types.UUID `json:"id,omitempty"`
	Message *string             `json:"message,omitempty"`
	Status  *string             `json:"status,omitempty"`
}

// APIDetailResponse defines model for APIDetailResponse.
type APIDetailResponse struct {
	Api *struct {
		Configuration *APIConfiguration   `json:"configuration,omitempty"`
		Id            *openapi_types.UUID `json:"id,omitempty"`
		Metadata      *struct {
			CreatedAt  *time.Time                          `json:"created_at,omitempty"`
			DeployedAt *time.Time                          `json:"deployed_at,omitempty"`
			Status     *APIDetailResponseApiMetadataStatus `json:"status,omitempty"`
			UpdatedAt  *time.Time                          `json:"updated_at,omitempty"`
		} `json:"metadata,omitempty"`
	} `json:"api,omitempty"`
	Status *string `json:"status,omitempty"`
}

// APIDetailResponseApiMetadataStatus defines model for APIDetailResponse.Api.Metadata.Status.
type APIDetailResponseApiMetadataStatus string

// APIListItem defines model for APIListItem.
type APIListItem struct {
	Context   *string             `json:"context,omitempty"`
	CreatedAt *time.Time          `json:"created_at,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Name      *string             `json:"name,omitempty"`
	Status    *APIListItemStatus  `json:"status,omitempty"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
	Version   *string             `json:"version,omitempty"`
}

// APIListItemStatus defines model for APIListItem.Status.
type APIListItemStatus string

// APIUpdateResponse defines model for APIUpdateResponse.
type APIUpdateResponse struct {
	Id        *openapi_types.UUID `json:"id,omitempty"`
	Message   *string             `json:"message,omitempty"`
	Status    *string             `json:"status,omitempty"`
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Errors Detailed validation errors
	Errors *[]ValidationError `json:"errors,omitempty"`

	// Message High-level error description
	Message string `json:"message"`
	Status  string `json:"status"`
}

// Operation defines model for Operation.
type Operation struct {
	// Method HTTP method
	Method OperationMethod `json:"method"`

	// Path Route path with optional {param} placeholders
	Path string `json:"path"`
}

// OperationMethod HTTP method
type OperationMethod string

// Upstream defines model for Upstream.
type Upstream struct {
	// Url Backend service URL (may include path prefix like /api/v2)
	Url string `json:"url"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	// Field Field that failed validation
	Field *string `json:"field,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`
}

// CreateAPIJSONRequestBody defines body for CreateAPI for application/json ContentType.
type CreateAPIJSONRequestBody = APIConfiguration

// UpdateAPIJSONRequestBody defines body for UpdateAPI for application/json ContentType.
type UpdateAPIJSONRequestBody = APIConfiguration

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all API configurations
	// (GET /apis)
	ListAPIs(c *gin.Context)
	// Create a new API configuration
	// (POST /apis)
	CreateAPI(c *gin.Context)
	// Delete an API configuration
	// (DELETE /apis/{name}/{version})
	DeleteAPI(c *gin.Context, name string, version string)
	// Get API configuration by name and version
	// (GET /apis/{name}/{version})
	GetAPIByNameVersion(c *gin.Context, name string, version string)
	// Update an existing API configuration
	// (PUT /apis/{name}/{version})
	UpdateAPI(c *gin.Context, name string, version string)
	// Health check endpoint
	// (GET /health)
	HealthCheck(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListAPIs operation middleware
func (siw *ServerInterfaceWrapper) ListAPIs(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAPIs(c)
}

// CreateAPI operation middleware
func (siw *ServerInterfaceWrapper) CreateAPI(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateAPI(c)
}

// DeleteAPI operation middleware
func (siw *ServerInterfaceWrapper) DeleteAPI(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", c.Param("version"), &version, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteAPI(c, name, version)
}

// GetAPIByNameVersion operation middleware
func (siw *ServerInterfaceWrapper) GetAPIByNameVersion(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", c.Param("version"), &version, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAPIByNameVersion(c, name, version)
}

// UpdateAPI operation middleware
func (siw *ServerInterfaceWrapper) UpdateAPI(c *gin.Context) {

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", c.Param("name"), &name, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithOptions("simple", "version", c.Param("version"), &version, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter version: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateAPI(c, name, version)
}

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheck(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/apis", wrapper.ListAPIs)
	router.POST(options.BaseURL+"/apis", wrapper.CreateAPI)
	router.DELETE(options.BaseURL+"/apis/:name/:version", wrapper.DeleteAPI)
	router.GET(options.BaseURL+"/apis/:name/:version", wrapper.GetAPIByNameVersion)
	router.PUT(options.BaseURL+"/apis/:name/:version", wrapper.UpdateAPI)
	router.GET(options.BaseURL+"/health", wrapper.HealthCheck)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vivx39C2C2149+pq9Z8AAAD//05WmwTrMAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
